//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::RoleTargetEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "role")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTimeWithTimeZone,
    pub name: String,
    pub description: String,
    #[sea_orm(column_name = "isPublic")]
    pub is_public: bool,
    #[sea_orm(column_name = "isModerator")]
    pub is_moderator: bool,
    #[sea_orm(column_name = "isAdministrator")]
    pub is_administrator: bool,
    #[sea_orm(column_type = "JsonBinary")]
    pub policies: Json,
    pub color: Option<String>,
    #[sea_orm(column_name = "canEditMembersByModerator")]
    pub can_edit_members_by_moderator: bool,
    #[sea_orm(column_name = "lastUsedAt")]
    pub last_used_at: DateTimeWithTimeZone,
    pub target: RoleTargetEnum,
    #[sea_orm(column_name = "condFormula", column_type = "JsonBinary")]
    pub cond_formula: Json,
    #[sea_orm(column_name = "iconUrl")]
    pub icon_url: Option<String>,
    #[sea_orm(column_name = "asBadge")]
    pub as_badge: bool,
    #[sea_orm(column_name = "displayOrder")]
    pub display_order: i32,
    #[sea_orm(column_name = "isExplorable")]
    pub is_explorable: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::role_assignment::Entity")]
    RoleAssignment,
}

impl Related<super::role_assignment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoleAssignment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
